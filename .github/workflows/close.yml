name: close-issues

on:
  workflow_run:
    workflows: ["pages-build-deployment"]
    types:
      - completed

jobs:
  get-shas:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
    - name: Get open issues with comments
      id: get-issues
      shell: pwsh
      env:
        COMMIT_TOKEN: ${{ secrets.COMMIT_TOKEN }}
      run: |
        $headers = @{ Authorization = "Bearer $env:COMMIT_TOKEN" }

        $issues = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/issues?state=open" -Headers $headers | ConvertFrom-Json
        $issueNumbers = ($issues | Where-Object { $_.comments -gt 0 } | ForEach-Object { $_.number }) | ConvertTo-Json -Compress
        echo "Issue numbers: $issueNumbers"
        "issue_numbers=$issueNumbers" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    
    - name: Filter issue comments containing a commit SHA
      id: filter-comments
      shell: pwsh
      env:
        COMMIT_TOKEN: ${{ secrets.COMMIT_TOKEN }}
      run: |
        $commitUrls = @()
        $headers = @{ Authorization = "Bearer $env:COMMIT_TOKEN" }
        $commitUrlRegex = "https://github.com/hpshelton/hpshelton.github.io/commit/([a-f0-9]{40})"

        foreach ($issue in ('${{ steps.get-issues.outputs.issue_numbers }}' | ConvertFrom-Json )) {
          $comments = Invoke-WebRequest -Uri "https://api.github.com/repos/${{ github.repository }}/issues/$issue/comments" -Headers $headers | ConvertFrom-Json
          $comments | Where-Object { $_.body -match $commitUrlRegex } | ForEach-Object { 
            $_.body -match $commitUrlRegex | Out-Null
            $pair = @{ "IssueNumber" = "$issue"; "CommitUrl" = $Matches[0] }
          }
          $commitUrls += $pair
        }
        $commitUrls = $commitUrls | ConvertTo-Json -Compress
        "commit_urls=$commitUrls" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: Extract commit SHA from comment
      id: extract-shas
      shell: pwsh
      run: |
        $shas = @()
        $commitUrlRegex = "https://github.com/hpshelton/hpshelton.github.io/commit/([a-f0-9]{40})"
        foreach ($pair in ('${{ steps.filter-comments.outputs.commit_urls }}' | ConvertFrom-Json )) {
          $pair.CommitUrl -match $commitUrlRegex | Out-Null
          $sha = $Matches[1]
          $shas += @{ "IssueNumber" = "$($pair.IssueNumber)"; "CommitSha" = $sha }
        }
        $shas = $shas | ConvertTo-Json -Compress
        "commit_shas=$shas" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    outputs:
      commit_shas: ${{ steps.extract-shas.outputs.commit_shas }}

  get-files:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: get-shas
    runs-on: ubuntu-latest

    steps:
    - name: Get changed Markdown files for each commit
      id: changed-files
      shell: pwsh
      env:
        COMMIT_TOKEN: ${{ secrets.COMMIT_TOKEN }}
      run: |
        $paths = @()
        $headers = @{ Authorization = "Bearer $env:COMMIT_TOKEN" }

        foreach ($pair in ('${{ needs.get-shas.outputs.commit_shas }}' | ConvertFrom-Json )) {
          $sha = $pair.CommitSha
          $commit = Invoke-WebRequest -Uri "https://api.github.com/repos/hpshelton/hpshelton.github.io/commits/$sha" -Headers $headers | ConvertFrom-Json
          $files = $commit.files.filename | Where-Object { $_ -ilike "*.md"}
          $files | ForEach-Object {
            $paths += @{ "IssueNumber" = "$($pair.IssueNumber)"; "FilePath" = $_ }
          }
        }
        $paths = $paths | ConvertTo-Json -Compress
        "file_paths=$paths" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    outputs:
      file_paths: ${{ steps.changed-files.outputs.file_paths }}

  check-logs:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: get-files
    runs-on: ubuntu-latest

    steps:
    - name: Scan build log for each post
      shell: pwsh
      env:
        COMMIT_TOKEN: ${{ secrets.COMMIT_TOKEN }}
      run: |
        $posted
        $headers = @{ Authorization = "Bearer $env:COMMIT_TOKEN" }

        $jobUrl = "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/jobs"
        $jobId = (Invoke-WebRequest -Uri $jobUrl -Headers $headers | ConvertFrom-Json).jobs | Where-Object { $_.name -eq "build" } | ForEach-Object { $_.id }
        $logsUrl = "https://api.github.com/repos/${{ github.repository }}/actions/jobs/$jobId/logs"
        $logs = (Invoke-WebRequest -Uri $logsUrl -Headers $headers -TimeoutSec 300).Content
                
        $Body = @{
          body = "Posted by $jobUrl"
        } | ConvertTo-Json

        foreach ($pair in ('${{ needs.get-files.outputs.file_paths }}' | ConvertFrom-Json )) {
          $path = $pair.FilePath
          if ($logs -like "*Skipping: $path has a future date*") {
            Write-Output "$path is still scheduled to be posted"
          } elseif ($logs -like "*Reading: $path*") {
            Write-Output "$path has been posted"
            # Invoke-WebRequest -Method POST -Uri "https://api.github.com/repos/${{ github.repository }}/issues/$($pair.IssueNumber)/comments" -Headers $Headers -Body $Body
          } else {
            Write-Output "Log content not found for $path."
          }          
        }
